import java.util.*;
import java.util.Queue;
import java.util.Map.Entry;
public class BinarySearchTree
{
    static Node root;
    static class Node
    {
        int key;
        int dist;
        Node left,right;
        Node(int k)
        {
            key = k;
            dist = Integer.MAX_VALUE;
            left = right = null;
        }
    }
    void insert(int key)
    {
         root = insertRec(root, key);
    }
    Node insertRec(Node root,int key)
    {
        if(root==null)
        {
            root = new Node(key);
            return root;
        }
        if(key<root.key)
        {
            root.left = insertRec(root.left,key);
        }
        else if(key>root.key)
        {
            root.right = insertRec(root.right,key);
        }
        return root;
    }
    void BottomView()
    {
        if(root==null)
        {
            return;
        }
        int dist = 0;
        Map<Integer, Integer> map = new TreeMap<>();
        
        Queue<Node> queue = new LinkedList<Node>();
        root.dist = dist;
        queue.add(root);
        
        while(!queue.isEmpty())
        {
            Node temp = queue.remove();
            dist = temp.dist;
            map.put(dist,temp.key);
            
            
            
            if(temp.left!=null)
            {
                temp.left.dist = dist-1;
                queue.add(temp.left);
            }
            if(temp.right!=null)
            {
                temp.right.dist = dist+1;
                queue.add(temp.right);
            }
        }
        
        Set<Entry<Integer, Integer>> set = map.entrySet();
        
        Iterator<Entry<Integer, Integer>> iterator = set.iterator();
        
        while (iterator.hasNext())
        {
            Map.Entry<Integer, Integer> me = iterator.next();
            System.out.print(me.getValue()+" ");
        }
    }
    public static void main(String[] args)
    {
        BinarySearchTree tree = new BinarySearchTree();
        tree.insert(5);
        tree.insert(3);
        tree.insert(4);
        tree.insert(2);
        tree.insert(7);
        tree.insert(8);
        tree.insert(6);
        tree.BottomView();
    }
}