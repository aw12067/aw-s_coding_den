import java.util.*;
import java.util.Queue;
import java.util.TreeMap;
import java.util.Vector;
import java.util.Map.Entry;
public class BinarySearchTree
{
    static Node root;
    static class Node
    {
        int key;
        Node left,right;
        Node(int k)
        {
            key = k;
            left = right = null;
        }
    }
    void insert(int key)
    {
         root = insertRec(root, key);
    }
    Node insertRec(Node root,int key)
    {
        if(root==null)
        {
            root = new Node(key);
            return root;
        }
        if(key<root.key)
        {
            root.left = insertRec(root.left,key);
        }
        else if(key>root.key)
        {
            root.right = insertRec(root.right,key);
        }
        return root;
    }
    private static void printRightView(Node root) 
    {
        if (root == null)
            return;
              
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
          
        while (!queue.isEmpty()) 
        {   
            int n = queue.size();
              
            for (int i = 1; i <= n; i++) {
                Node temp = queue.poll();
                  
                
                if (i == n)
                    System.out.print(temp.key + " ");
                  
                
                if (temp.left != null)
                    queue.add(temp.left);
                      
                if (temp.right != null)
                    queue.add(temp.right);
            }
        }
    }
    
    public static void main(String[] args)
    {
        BinarySearchTree tree = new BinarySearchTree();
        tree.insert(5);
        tree.insert(3);
        tree.insert(4);
        tree.insert(2);
        tree.insert(7);
        tree.insert(8);
        tree.insert(6);
        printRightView(root);
    }
}