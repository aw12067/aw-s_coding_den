//Fibonacci Series using Recursion
class fibonacci
{
	static int fib(int n)
	{
	if (n <= 1)
	return n;
	return fib(n-1) + fib(n-2);
	}
	
	public static void main (String args[])
	{
	int n = 9;
	System.out.println(fib(n));
	}
}
/* This code is contributed by Rajat Mishra */

Iterative
import java.util.Scanner;
public class Main
{
    public static int Fibonacci(int num)
    {
       int num1 = 0;int num2 = 1;
       int sum=0;
       while(num-->0)
       {
           sum=num1+num2;
           num1=num2;
           num2=sum;
       }
       return sum;
    }
     public static void main(String []args)
     {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        System.out.println(Fibonacci(num-2));
     }
}


// Java Program to find n'th fibonacci
// Number with O(Log n) arithmetic operations
import java.util.*;

class GFG {
	
	static int MAX = 1000;
	static int f[];
	
	// Returns n'th fibonacci number using
	// table f[]
	public static int fib(int n)
	{
		// Base cases
		if (n == 0)
			return 0;
			
		if (n == 1 || n == 2)
			return (f[n] = 1);
	
		// If fib(n) is already computed
		if (f[n] != 0)
			return f[n];
	
		int k = (n & 1) == 1? (n + 1) / 2: n / 2;
	
		// Applying above formula [Note value n&1 is 1 if n is odd, else 0.
		f[n] = (n & 1) == 1? (fib(k) * fib(k) +fib(k - 1) * fib(k - 1)): (2 * fib(k - 1) + fib(k))* fib(k);
	
		return f[n];
	}
	
	/* Driver program to test above function */
	public static void main(String[] args)
	{
		int n = 9;
		f= new int[MAX];
		System.out.println(fib(n));
	}
}
	
// This code is contributed by Arnav Kr. Mandal.

// Java Program to find n'th fibonacci Number
import java.util.*;

class GFG {

static int fib(int n) {
double phi = (1 + Math.sqrt(5)) / 2;
return (int) Math.round(Math.pow(phi, n)/ Math.sqrt(5));
}

// Driver Code
public static void main(String[] args) {
		int n = 9;
	System.out.println(fib(n));
	}
}
// This code is contributed by PrinciRaj1992

