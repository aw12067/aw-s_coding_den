import java.util.*;
import java.util.Queue;
import java.util.TreeMap;
import java.util.Vector;
import java.util.Map.Entry;
public class BinarySearchTree
{
    static Node root;
    static class Node
    {
        int key;
        Node left,right;
        Node(int k)
        {
            key = k;
            left = right = null;
        }
    }
    void insert(int key)
    {
         root = insertRec(root, key);
    }
    Node insertRec(Node root,int key)
    {
        if(root==null)
        {
            root = new Node(key);
            return root;
        }
        if(key<root.key)
        {
            root.left = insertRec(root.left,key);
        }
        else if(key>root.key)
        {
            root.right = insertRec(root.right,key);
        }
        return root;
    }
    static void getVerticalOrder(Node root, int dist, TreeMap<Integer,Vector<Integer>> m)
    {
        if(root==null)
        {
            return;
        }
        Vector<Integer> get = m.get(dist);
        if(get == null)
        {
            get = new Vector<>();
            get.add(root.key);
        }
        else
        {
            get.add(root.key);
        }
        m.put(dist,get);
        getVerticalOrder(root.left, dist-1, m);
        getVerticalOrder(root.right, dist+1, m);
    }
    static void verticalorder(Node root)
    {
        TreeMap<Integer,Vector<Integer>> m = new TreeMap<>();
        int dist = 0;
        getVerticalOrder(root,dist,m);
        
        for (Entry<Integer, Vector<Integer>> entry : m.entrySet())
        {
            System.out.println(entry.getValue());
        }
    }
    
    public static void main(String[] args)
    {
        BinarySearchTree tree = new BinarySearchTree();
        tree.insert(5);
        tree.insert(3);
        tree.insert(4);
        tree.insert(2);
        tree.insert(7);
        tree.insert(8);
        tree.insert(6);
        tree.verticalorder(root);
    }
}