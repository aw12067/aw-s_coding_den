import java.util.*;

public class BinarySearchTree
{
    static Node root;
    static class Node
    {
        int key;
        Node left,right;
        Node(int k)
        {
            key = k;
            left = right = null;
        }
    }
    void insert(int key)
    {
         root = insertRec(root, key);
    }
    Node insertRec(Node root,int key)
    {
        if(root==null)
        {
            root = new Node(key);
            return root;
        }
        if(key<root.key)
        {
            root.left = insertRec(root.left,key);
        }
        else if(key>root.key)
        {
            root.right = insertRec(root.right,key);
        }
        return root;
    }
    void zigzag()
    {
        if(root==null)
        {
            return;
        }
        Stack<Node> currentLevel = new Stack<>();
        Stack<Node> nextLevel = new Stack<>();
        currentLevel.push(root);
        boolean ltr = true;
        while(!currentLevel.isEmpty())
        {
            Node node = currentLevel.pop();
            
            System.out.println(node.key);
            
            if (ltr) 
            {
                if (node.left != null) 
                {
                    nextLevel.push(node.left);
                }
                 
                if (node.right != null) 
                {
                    nextLevel.push(node.right);
                }
            }
            else
            {
                if (node.right != null) 
                {
                    nextLevel.push(node.right);
                }
                 
                if (node.left != null) 
                {
                    nextLevel.push(node.left);
                }
            }
            
            if(currentLevel.isEmpty())
            {
                ltr = !ltr;
                Stack<Node> temp = currentLevel;
                currentLevel = nextLevel;
                nextLevel = temp;
            }
        }
    }
    public static void main(String[] args)
    {
        BinarySearchTree tree = new BinarySearchTree();
        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);
        tree.zigzag();
        
    }
}