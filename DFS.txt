import java.util.*;
public class Graph
{
    static void addEdge(ArrayList<ArrayList<Integer>> adj, int u,int v)
    {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }
    static void printGraph(ArrayList<ArrayList<Integer>> adj)
    {
        for(int i=0;i<adj.size();i++)
        {
            System.out.print(i+" = ");
            for(int j=0;j<adj.get(i).size();j++)
            {
                System.out.print("->"+adj.get(i).get(j));
            }
            System.out.println();
        }
    }
    static void dfsutil(ArrayList<ArrayList<Integer>> adj,int node,boolean visited[])
    {
        visited[node] = true;
        System.out.print(node+" ");
        for(int x:adj.get(node))
        {
            if(visited[x]==false)
            {
                dfsutil(adj,x,visited);
            }
        }
    }
    static void dfs(ArrayList<ArrayList<Integer>> adj,int s,int v)
    {
        boolean visited[] = new boolean[v];
        dfsutil(adj,s,visited);
    }
    public static void main(String []args)
    {
        int v = 5;
        ArrayList<ArrayList<Integer> > adj = new ArrayList<ArrayList<Integer>>(v);
        for (int i = 0; i < v; i++)
        {
            adj.add(new ArrayList<Integer>());
        }
        addEdge(adj, 0, 1);
        addEdge(adj, 0, 4);
        addEdge(adj, 1, 2);
        addEdge(adj, 1, 3);
        addEdge(adj, 1, 4);
        addEdge(adj, 2, 3);
        addEdge(adj, 3, 4);
         
        printGraph(adj);
        
        System.out.println("\n"+"DFS");
        dfs(adj,1,v);
    }
}