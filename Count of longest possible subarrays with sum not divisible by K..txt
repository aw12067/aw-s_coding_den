import java.util.*;

public class GFG
{
    static int CountLongestSubarrays(int arr[],int n, int k)
    {
    	int i, s = 0;
    	for(i = 0; i < n; ++i)
    	{
    	s += arr[i];
    	}
    
    	// If overall sum is not
    	// divisible then return
    	// 1, as only one subarray
    	// of size n is possible
    	if ((s % k) != 0)
    	{
    		return 1;
    	}
    	else
    	{
    		int ini = 0;
    
    		// Index of the first number
    		// not divisible by K
    		while (ini < n && arr[ini] % k == 0)
    		{
    			++ini;
    		}
    
    		int fin = n - 1;
    
    		// Index of the last number
    		// not divisible by K
    		while (fin >= 0 && arr[fin] % k == 0)
    		{
    			--fin;
    		}
    
    		int len, sum = 0, count = 0;
    		
    		// Subarray doesn't exist
    		if (ini == n)
    		{
    			return -1;
    		}
    		else
    		{
    			len = Math.max(n - 1 - ini, fin);
    		}
    
    		// Sum of the window
    		for(i = 0; i < len; i++)
    		{
    		sum += arr[i];
    		}
    
    		if (sum % k != 0)
    		{
    			count++;
    		}
    		
    		// Calculate the sum of rest of
    		// the windows of size len
    		for(i = len; i < n; i++)
    		{
    		sum = sum + arr[i];
    		sum = sum - arr[i - len];
    		if (sum % k != 0)
    		{
    			count++;
    		}
    		}
    		return count;
    	}
}

// Driver Code
public static void main (String []args)
{
	int arr[] = { 3, 2, 2, 2, 3 };
	int n = arr.length;
	int k = 3;
	
	System.out.print(CountLongestSubarrays(
					arr, n, k));
}
}

// This code is contributed by chitranayal
